# Flask Application Environment Variables
# Copy this file to .env and modify the values as needed
# Usage: source .env (or use python-dotenv package)

# =============================================================================
# CRITICAL PRODUCTION SETTINGS
# =============================================================================

# SECRET_KEY - REQUIRED for production deployment
# Used for session management, CSRF protection, and secure cookies
# Generate a secure random key: python3 -c "import secrets; print(secrets.token_hex(32))"
# NEVER use the default value in production!
SECRET_KEY=your-super-secure-random-secret-key-here-change-this-in-production

# DEBUG - Application debug mode
# MUST be False in production for security
# Set to True only for local development
DEBUG=False

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# PORT - Port number for the Flask application
# Must match your ALB target group configuration
# Must match EC2 security group inbound rules
# Default: 8080
PORT=8080

# HOST - Interface to bind to
# Use 0.0.0.0 for production (accepts traffic from ALB)
# Use 127.0.0.1 for local development only
HOST=0.0.0.0

# =============================================================================
# AWS DEPLOYMENT SETTINGS
# =============================================================================

# ENVIRONMENT - Deployment environment identifier
# Used for logging and configuration management
# Options: development, staging, production
ENVIRONMENT=production

# AWS_REGION - AWS region for the deployment
# Used for CloudWatch logging and other AWS services
# Example: us-east-1, us-west-2, eu-west-1
AWS_REGION=us-east-1

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# LOG_LEVEL - Application logging level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Use INFO or WARNING for production
LOG_LEVEL=INFO

# LOG_FILE - Path to log file (optional)
# If not set, logs go to stdout/systemd journal
# Example: /var/log/webapp.log
# LOG_FILE=/var/log/webapp.log

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# ALLOWED_HOSTS - Comma-separated list of allowed hostnames
# Used for additional security validation
# Example: your-alb-dns-name.us-east-1.elb.amazonaws.com,yourdomain.com
# ALLOWED_HOSTS=your-alb-dns-name.us-east-1.elb.amazonaws.com

# RATE_LIMIT_ENABLED - Enable application-level rate limiting
# Set to True to enable additional rate limiting beyond WAF
# Default: False (rely on WAF for rate limiting)
RATE_LIMIT_ENABLED=False

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================

# MAX_CONTENT_LENGTH - Maximum request size in bytes
# Helps prevent large request attacks
# Default: 16MB (16 * 1024 * 1024)
MAX_CONTENT_LENGTH=16777216

# REQUEST_TIMEOUT - Request timeout in seconds
# Maximum time to wait for a request to complete
# Default: 30 seconds
REQUEST_TIMEOUT=30

# =============================================================================
# DEVELOPMENT SETTINGS (Local Development Only)
# =============================================================================

# FLASK_ENV - Flask environment mode
# Options: development, production
# Only use 'development' for local development
FLASK_ENV=production

# TESTING - Enable testing mode
# Set to True only when running tests
# Default: False
TESTING=False

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# Method 1: Source the file before running the application
# $ cp .env.example .env
# $ nano .env  # Edit the values
# $ source .env
# $ python3 run.py

# Method 2: Use with systemd service
# 1. Copy this file to .env in the application directory
# 2. Edit the values as needed
# 3. Update webapp.service to include: EnvironmentFile=/opt/flask-app/.env
# 4. Restart the service: sudo systemctl restart webapp

# Method 3: Use with python-dotenv (recommended for development)
# 1. Install: pip3 install python-dotenv
# 2. Add to app.py: from dotenv import load_dotenv; load_dotenv()
# 3. Copy .env.example to .env and edit values

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. NEVER commit .env files to version control
# 2. Add .env to your .gitignore file
# 3. Use different .env files for different environments
# 4. Rotate SECRET_KEY regularly in production
# 5. Use AWS Systems Manager Parameter Store for sensitive values in production
# 6. Restrict file permissions: chmod 600 .env

# =============================================================================
# AWS SYSTEMS MANAGER PARAMETER STORE (Production Alternative)
# =============================================================================

# For production deployments, consider using AWS Systems Manager Parameter Store
# instead of .env files for sensitive configuration:

# Store parameters:
# aws ssm put-parameter --name "/webapp/SECRET_KEY" --value "your-secret-key" --type "SecureString"
# aws ssm put-parameter --name "/webapp/DEBUG" --value "False" --type "String"

# Retrieve in application:
# import boto3
# ssm = boto3.client('ssm')
# secret_key = ssm.get_parameter(Name='/webapp/SECRET_KEY', WithDecryption=True)['Parameter']['Value']
